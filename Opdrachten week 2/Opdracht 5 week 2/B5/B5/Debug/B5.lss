
B5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001c4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3c  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086f  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ae  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b9  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000048a  00000000  00000000  0000220d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	75 d0       	rcall	.+234    	; 0x19e <main>
  b4:	85 c0       	rjmp	.+266    	; 0x1c0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
	lcd_write_command(0xC0);
	for(;*str; str++){
		lcd_write_data(*str);
	}
	_delay_ms(250);
}
  b8:	ab 9a       	sbi	0x15, 3	; 21
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_strobe_lcd_e+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_strobe_lcd_e+0xc>
  c4:	00 00       	nop
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_strobe_lcd_e+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_strobe_lcd_e+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <init_4bits_mode>:
  d6:	cf 93       	push	r28
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 bb       	out	0x14, r24	; 20
  dc:	15 ba       	out	0x15, r1	; 21
  de:	c0 e2       	ldi	r28, 0x20	; 32
  e0:	c5 bb       	out	0x15, r28	; 21
  e2:	ea df       	rcall	.-44     	; 0xb8 <lcd_strobe_lcd_e>
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	e8 df       	rcall	.-48     	; 0xb8 <lcd_strobe_lcd_e>
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	e5 df       	rcall	.-54     	; 0xb8 <lcd_strobe_lcd_e>
  ee:	15 ba       	out	0x15, r1	; 21
  f0:	e3 df       	rcall	.-58     	; 0xb8 <lcd_strobe_lcd_e>
  f2:	80 ef       	ldi	r24, 0xF0	; 240
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	e0 df       	rcall	.-64     	; 0xb8 <lcd_strobe_lcd_e>
  f8:	15 ba       	out	0x15, r1	; 21
  fa:	de df       	rcall	.-68     	; 0xb8 <lcd_strobe_lcd_e>
  fc:	80 e6       	ldi	r24, 0x60	; 96
  fe:	85 bb       	out	0x15, r24	; 21
 100:	db df       	rcall	.-74     	; 0xb8 <lcd_strobe_lcd_e>
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <lcd_write_data>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	d4 df       	rcall	.-88     	; 0xb8 <lcd_strobe_lcd_e>
 110:	c2 95       	swap	r28
 112:	c0 7f       	andi	r28, 0xF0	; 240
 114:	c5 bb       	out	0x15, r28	; 21
 116:	aa 9a       	sbi	0x15, 2	; 21
 118:	cf df       	rcall	.-98     	; 0xb8 <lcd_strobe_lcd_e>
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <lcd_write_command>:
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
 122:	85 bb       	out	0x15, r24	; 21
 124:	aa 98       	cbi	0x15, 2	; 21
 126:	c8 df       	rcall	.-112    	; 0xb8 <lcd_strobe_lcd_e>
 128:	c2 95       	swap	r28
 12a:	c0 7f       	andi	r28, 0xF0	; 240
 12c:	c5 bb       	out	0x15, r28	; 21
 12e:	aa 98       	cbi	0x15, 2	; 21
 130:	c3 df       	rcall	.-122    	; 0xb8 <lcd_strobe_lcd_e>
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <lcd_write>:
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	14 2f       	mov	r17, r20
 140:	61 30       	cpi	r22, 0x01	; 1
 142:	71 05       	cpc	r23, r1
 144:	31 f4       	brne	.+12     	; 0x152 <lcd_write+0x1c>
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	ea df       	rcall	.-44     	; 0x11e <lcd_write_command>
 14a:	88 81       	ld	r24, Y
 14c:	81 11       	cpse	r24, r1
 14e:	07 c0       	rjmp	.+14     	; 0x15e <lcd_write+0x28>
 150:	16 c0       	rjmp	.+44     	; 0x17e <lcd_write+0x48>
 152:	62 30       	cpi	r22, 0x02	; 2
 154:	71 05       	cpc	r23, r1
 156:	c9 f7       	brne	.-14     	; 0x14a <lcd_write+0x14>
 158:	80 ec       	ldi	r24, 0xC0	; 192
 15a:	e1 df       	rcall	.-62     	; 0x11e <lcd_write_command>
 15c:	f6 cf       	rjmp	.-20     	; 0x14a <lcd_write+0x14>
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	d2 df       	rcall	.-92     	; 0x106 <lcd_write_data>
 162:	11 23       	and	r17, r17
 164:	49 f0       	breq	.+18     	; 0x178 <lcd_write+0x42>
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	80 e7       	ldi	r24, 0x70	; 112
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <lcd_write+0x36>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_write+0x40>
 176:	00 00       	nop
 178:	89 91       	ld	r24, Y+
 17a:	81 11       	cpse	r24, r1
 17c:	f1 cf       	rjmp	.-30     	; 0x160 <lcd_write+0x2a>
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	08 95       	ret

00000186 <lcd_clear>:
	lcd_strobe_lcd_e();
}

void lcd_clear(void)
{
	lcd_write_command(0x01);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	ca df       	rcall	.-108    	; 0x11e <lcd_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	2f e7       	ldi	r18, 0x7F	; 127
 18c:	8a e1       	ldi	r24, 0x1A	; 26
 18e:	96 e0       	ldi	r25, 0x06	; 6
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <lcd_clear+0xa>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_clear+0x14>
 19a:	00 00       	nop
 19c:	08 95       	ret

0000019e <main>:
}

int main( void )
{
	// Init I/O
	DDRD = 0xFF; // PORTD(7) output, PORTD(6:0) input
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	81 bb       	out	0x11, r24	; 17

	// Init LCD
	init_4bits_mode();
 1a2:	99 df       	rcall	.-206    	; 0xd6 <init_4bits_mode>

	// Loop forever
	while (1)
	{
		lcd_clear();
 1a4:	f0 df       	rcall	.-32     	; 0x186 <lcd_clear>
 1a6:	40 e0       	ldi	r20, 0x00	; 0
		lcd_write("Yedi you are", 1, 0);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	c2 df       	rcall	.-124    	; 0x136 <lcd_write>
 1b2:	41 e0       	ldi	r20, 0x01	; 1
		lcd_write("Yedi you are", 2, 1);
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	bc df       	rcall	.-136    	; 0x136 <lcd_write>
 1be:	f2 cf       	rjmp	.-28     	; 0x1a4 <main+0x6>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
